{
    "Create Match":{
        "scope": "csharp",
		"prefix": "MatchValueWithUnit",
		"body": [
			"List<string> MatchValueWithUnit(List<ProductAttribute> Sets, List<string> Separators, string locale = \"\", bool isContainsCheck = false, bool isUSM = false){",
			"    var d = new Dictionary<int, string>();",
			"    int i = 0;",
			"    string v=\"\";",
			"    int innerJ = -1;",
			"    bool isNull = true;",
			"    Sets.ForEach(attr => {",
			"        if (attr.HasValue()){",
			"            foreach (var attrValue in attr.GetValuesWithUnits()){",
			"                innerJ = -1;",
			"                i = attrValue.Value.SetNo;",
			"                if (!(d.ContainsKey(i))){",
			"                Sets.ForEach(attr2 => {",
			"                    isNull = true;",
			"                     if (attr2.HasValue()){",
			"                         foreach (var attrValue2 in attr2.GetValuesWithUnits()){",
			"                             if (attrValue2.Value.SetNo==i){",
			"                                 isNull= false;",
			"                                 if (isUSM && attrValue2.Value.ValueUSM!=\"\"){",
			"                                     v =attrValue2.Value.ValueUSM+\"\"+attrValue2.Unit.NameUSM;",
			"                                 }",
			"                                 else if (isContainsCheck){",
			"                                     v =\"[\"+attrValue2.Value.Value(\"en\")+\"]\"+attrValue2.Value.Value(locale)+\"\"+attrValue2.Unit.GetName(locale);",
			"                                 }",
			"                                 else {",
			"                                     v =attrValue2.Value.Value(locale)+\"\"+attrValue2.Unit.GetName(locale);",
			"                                 }",
			"                                 if(d.ContainsKey(i)){",
			"                                     d[i] = $\"{d[i]}{(innerJ >= 0 ? Separators[innerJ] : \"\")}{v}\";",
			"                                     isNull= false;",
			"                                    }",
			"                                 else{",
			"                                     d.Add(i, v);",
			"                                     isNull= false;",
			"                                    }",
			"                                }",
			"                            }",
			"                     }",
			"                     if(isNull){",
			"                        if(d.ContainsKey(i)){",
			"                            d[i] = $\"{d[i]}{(innerJ >= 0 ? Separators[innerJ] : \"\")}<>\";",
			"                            isNull= false;",
			"                        }",
			"                        else{",
			"                            v=$\"{(innerJ >= 0 ? Separators[innerJ] : \"\")}<>\";",
			"                            d.Add(i, v);",
			"                            isNull= false;",
			"                        }",
			"                    }",
			"                    innerJ++;",
			"                });",
			"                }",
			"            }",
			"        }",
			"    });",
			"    return d.Values.ToList();",
			"}",
		],
		"description": "Creates new match method"
	},
	"Create getCapacity Notebooks": {
        "scope": "csharp",
		"prefix": "gCNotebook",
		"body": [
			"string getCapacity(string type){",
			"    double capacity = 0.0;",
			"    capacity = ",
			"            (A[5780].HasValue(type) && A[76].HasValue()",
			"                ? A[76].FirstValueOrDefault() * Coalesce(A[73].FirstValueOrDefault(),1) *",
			"                    (A[76].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0)",
			"            +",
			"            (A[5781].HasValue(type) && A[781].HasValue()",
			"                ? A[781].FirstValueOrDefault() *",
			"                    (A[781].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0)",
			"            +",
			"            (A[4627].HasValue(type) && A[4630].HasValue()",
			"                ? A[4630].FirstValueOrDefault() * Coalesce(A[4629].FirstValueOrDefault(),1) *",
			"                    (A[4630].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0);",
			"    if (capacity>=1000.0){",
			"        return capacity/1000.0 + \" TB\";",
			"    }",
			"    else if(capacity>0.0) {",
			"        return capacity.ToString()+\" GB\";",
			"    }",
			"    else {",
			"        return \"\";",
			"    }",
			"}",
		],
		"description": "Creates 'getCapacity' method for Notebooks"
	},
	"Create getCapacity Desktop": {
        "scope": "csharp",
		"prefix": "gCDesktop",
		"body": [
			"string getCapacity(string type){",
			"    double capacity = 0.0;",
			"    capacity = ",
			"            (A[6201].HasValue(type) && A[76].HasValue()",
			"                ? A[76].FirstValueOrDefault() * Coalesce(A[73].FirstValueOrDefault(),1) *",
			"                    (A[76].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0)",
			"            +",
			"            (A[6206].HasValue(type) && A[781].HasValue()",
			"                ? A[781].FirstValueOrDefault() *",
			"                    (A[781].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0)",
			"            +",
			"            (A[4627].HasValue(type) && A[4630].HasValue()",
			"                ? A[4630].FirstValueOrDefault() * Coalesce(A[4629].FirstValueOrDefault(),1) *",
			"                    (A[4630].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0);",
			"            +",
			"            (A[8201].HasValue(type) && A[8204].HasValue()",
			"                ? A[8204].FirstValueOrDefault() * Coalesce(A[8203].FirstValueOrDefault(),1) *",
			"                    (A[8204].FirstUnit() == \"TB\" ? 1000 : 1)",
			"                : 0.0);",
			"    if (capacity>=1000.0){",
			"        return capacity/1000.0 + \" TB\";",
			"    }",
			"    else if(capacity>0.0) {",
			"        return capacity.ToString()+\" GB\";",
			"    }",
			"    else {",
			"        return \"\";",
			"    }",
			"}",
		],
		"description": "Creates 'getCapacity' method for Desktop"
	},
	"Create Dictionary Expression":{
        "scope": "csharp",
		"prefix": "DictValues",
		"body": [
			"var dictionary = R(\"cnet_dictionary\").Text;",
			"var LOVName = \"LOV_FEAT_$1\";",
			"",
			"var result = \"\";",
			"",
			"//code here",
			"$2",
			"//end code",
			"",
			"if (result!=\"\"){",
			"    foreach (var val in result.Split(\"|\")){",
			"        if (val!=\"\"){",
			"            if (dictionary.ToString().Split(\"|\").Where(s => s.StartsWith(LOVName+\"<\"+val+\"<<\")).Any()){",
			"                Add (dictionary.ToString().Split(\"|\").Where(s => s.StartsWith(LOVName+\"<\"+val+\"<<\")).First().Split(\"<<\").Last());",
			"            }",
			"            else if (dictionary.ToString().Split(\"|\").Where(s => s.StartsWith(val+\"<<\")).Any()) {",
			"                Add (dictionary.ToString().Split(\"|\").Where(s => s.StartsWith(val+\"<<\")).First().Split(\"<<\").Last());",
			"            }",
			"            else {",
			"                Add(val);",
			"            }   ",
			"        }",
			"    }",
			"}",
		],
		"description": "Create dictionary Expression for MSHProject",
	},
	"Create Locale Expression":{
        "scope": "csharp",
		"prefix": "locale",
		"body": [
			"var language = \"$1\";",
			"var locale = REQ.GetVariable(\"TX_Locale\");",
			"",
			"if (locale!=\"\"){",
			"    language = locale.ToString().Split(\"-\").First();",
			"}",
			"",
			"var result=\"\";",
			"",
			"//CODE HERE (dont forget value in (language))",
			"$2",
			"",
			"if (result!=\"\"){",
			"    Add(result);",
			"}",
		],
		"description": "Create Locale Expression for MSHProject"
	},
	"Create ListProdAttribute":{
        "scope": "csharp",
		"prefix": "prodList",
		"body": [
			"var attrList = new List<ProductAttribute>(){",
			"    A[$1],",
			"};",
		],
		"description": "Create List<ProductAttribute>"
	},
	"Metric cases": {
        "scope": "csharp",
		"prefix": "switchMetric",
		"body": [
			"if (A[$1].HasValue()){",
			"    switch (A[$1].FirstUnit(\"en\").ToString())",
			"    {",
			"        case \"\":",
			"            $2",
			"            break;",
			"        case \"\":",
			"",
			"            break;",
			"        //more cases if you need",
			"        default: break;",
			"    }",
			"}",
		],
		"description": "Create switch construct for some unit value"
	},
	"Check color": {
        "scope": "csharp",
		"prefix": "color",
		"body": [
			"//Example: Light blue|Matte black|Cream white|Aluminium|Black|Blue|Creme|Green|Grey|Gray|Metal|Orange|Purple|Red|Silver|Steel|White",
			"//Write numbers of attributes below and add if you need more",
			"var colorAttr = new List<ProductAttribute>(){",
			"    A[$1],",
			"    A[$2]",
			"};",
			"//Dont forget the Gray value if you have Grey in list",
			"var valueList = \"$3\".Split(\"|\").ToList();",
			"var valueListMulti = valueList.Where(x => x.Contains(\"/\")).ToList();",
			"",
			"var resultList = new List<string>();",
			"var colorList = new List<string>();",
			"",
			"if (valueListMulti.Any()){",
			"    foreach (var color in colorAttr.Where(x => x.HasValue()))",
			"    {",
			"        foreach (var val in valueListMulti)",
			"        {",
			"            if (color.Values.Count == 1){",
			"                if (color.HasValue(\"%\"+val+\"%\")){",
			"                    resultList.Add(val);",
			"                    break;",
			"                }",
			"            }",
			"            else if (color.Values.Count > 1){",
			"                if (color.HasValue(\"%\"+val+\"%\") ",
			"                    || (color.HasValue(val.Split(\"/\")[0]) && color.HasValue(val.Split(\"/\")[1]))){",
			"                    resultList.Add(val);",
			"                    break;",
			"                }",
			"            }",
			"        } ",
			"    }",
			"}",
			"",
			"if (colorAttr.Any(x => x.HasValue())){",
			"    if (resultList.Any()){",
			"        foreach (var res in resultList)",
			"        {",
			"            valueList.Remove(res);",
			"            foreach (var clr in res.Split(\"/\"))",
			"            {   ",
			"                var itemToRemove = valueList.SingleOrDefault(str => str == clr);",
			"                if (itemToRemove != null) {",
			"                    valueList.Remove(itemToRemove);",
			"                }   ",
			"            }",
			"        }  ",
			"    }",
			"    if (valueList.Any(x => x.Contains(\" \"))){",
			"        colorAttr.Where(x => x.HasValue()).ToList().ForEach(",
			"            attr => attr.Values.ForEach(",
			"                val => val.Value(\"en\").Split(\"/\", \", \").ToList().ForEach(",
			"                    str => colorList.Add(!colorList.Any(x => x.Contains(str)) ? str.Replace(\"(\", \"\").Replace(\")\", \"\").ToUpperFirstChar() : \"\")",
			"                )",
			"            )",
			"        );",
			"    }",
			"    else {",
			"        colorAttr.Where(x => x.HasValue()).ToList().ForEach(",
			"            attr => attr.Values.ForEach(",
			"                val => val.Value(\"en\").Split(\"/\", \" \", \", \").ToList().ForEach(",
			"                    str => colorList.Add(colorList.IndexOf(str.ToUpperFirstChar()) == -1 ? str.Replace(\"(\", \"\").Replace(\")\", \"\").ToUpperFirstChar() : \"\")",
			"                )",
			"            )",
			"        );",
			"    }",
			"    ",
			"    ",
			"    if (colorList.Any()){",
			"        /*Clear all empty entry in List*/",
			"        colorList.RemoveAll(string.IsNullOrWhiteSpace); ",
			"    ",
			"        /*Add to result all existing color-values from list*/",
			"        foreach (var color in valueList)",
			"        {",
			"            if (colorList.IndexOf(color) != -1){",
			"                resultList.Add(color);",
			"            }",
			"        }  ",
			"    }",
			"}",
			"if (valueList.Any(x => x == \"Multi-colored\")){",
			"    if(resultList.Any()){",
			"        Add(resultList.Distinct().Flatten(\";\").Replace(\"Gray\", \"Grey\", \"gray\", \"grey\", \"Multicolor\", \"Multi-colored\"));",
			"    }",
			"    else if (A[5795].Values.Count() > 1 || A[373].Values.Count() > 1 || A[3541].Values.Count() > 1){",
			"        Add(\"Multi-colored\");",
			"    }",
			"}",
			"else if(resultList.Any()){",
			"    Add(resultList.Distinct().Flatten(\";\").Replace(\"Gray\", \"Grey\", \"gray\", \"grey\"));",
			"}",
		],
		"description": "Creates universal color expression"
	},
	"ExtrctNumbersMax":{
        "scope": "csharp",
		"prefix": "ExtnmbrsMax",
		"body": "ExtractNumbers().Max()",
		"description": "Adds .ExtractNumbers Max construction"
	},
	"ExtrctNumbersMin":{
        "scope": "csharp",
		"prefix": "ExtnmbrsMin",
		"body": "ExtractNumbers().Min()",
		"description": "Adds .ExtractNumbers Min construction"
	},
	"ExtrctNumbersSum":{
        "scope": "csharp",
		"prefix": "ExtnmbrsSum",
		"body": "ExtractNumbers().Sum()",
		"description": "Adds .ExtractNumbers Sum construction"
	},
	"ExtrctNumbersFirst":{
        "scope": "csharp",
		"prefix": "ExtnmbrsFirst",
		"body": "ExtractNumbers().First()",
		"description": "Adds .ExtractNumbers First construction"
	},
	"ExtrctNumbersLast":{
        "scope": "csharp",
		"prefix": "ExtnmbrsLast",
		"body": "ExtractNumbers().Last()",
		"description": "Adds .ExtractNumbers Last construction"
	},
	"Contains":{
        "scope": "csharp",
		"prefix": "Contains",
		"body": "Contains(\"$1\")",
		"description": "Adds .Contains(\"\") method"
	},
	"HasValue":{
        "scope": "csharp",
		"prefix": "HasValue",
		"body": "HasValue(\"$1\")",
		"description": "Adds .HasValue(\"\") method"
	},
	"Split":{
        "scope": "csharp",
		"prefix": "Split",
		"body": "Split(\"$1\")",
		"description": "Adds .Split(\"\") method"
	},
	"Flatten":{
        "scope": "csharp",
		"prefix": "Flatten",
		"body": "Flatten(\"$1\")",
		"description": "Adds .Flatten(\"\") method"
	},
	"Distinct":{
        "scope": "csharp",
		"prefix": "Dist",
		"body": "Distinct()",
		"description": "Adds .Distinct() method"
	},
	"DistinctFlatten":{
        "scope": "csharp",
		"prefix": "DistFlatten",
		"body": "Distinct().Flatten(\"$1\")",
		"description": "Adds .Distinct().Flatten(\"\") construction"
	},
	"Coalesce":{
        "scope": "csharp",
		"prefix": "Coalesce",
		"body": [
			"//Add more attributes if you need",
			"var $1 = Coalesce($2, $3);"
		],
		"description": "Add Coalesce() construction"
	},
	"Add List on Output":{
        "scope": "csharp",
		"prefix": "resListAdd",
		"body": [
			"if ($1.Any()){",
			"    Add($1.Distinct().Flatten(\"$2\"));",
			"}",
		],
		"description": "Adds construction that outputs list"
	},
	"Get all values from attribute list": {
        "scope": "csharp",
		"prefix": "getDataList",
		"body": [
			"if ($1.Any(x => x.HasValue())){",
			"    $1.Where(x => x.HasValue()).ToList().ForEach(",
			"        attr => attr.Values.ForEach(",
			"            val => $2.Add(val.Value().ToUpperFirstChar())",
			"        )",
			"    );",
			"}",
		],
		"description": "Adds construction to get all Values from attribute list"
	},
	"ToUpperFirstChar":{
        "scope": "csharp",
		"prefix": "ToUpperFirstChar",
		"body": "ToUpperFirstChar()",
		"description": "Adds .ToUpperFirstChar() method"
	},
	"ToTitleCase":{
        "scope": "csharp",
		"prefix": "ToTitle",
		"body": "ToTitleCase()",
		"description": "Adds .ToTitleCase() method"
	},
	"ToLower":{
        "scope": "csharp",
		"prefix": "ToLower",
		"body": "ToLower()",
		"description": "Adds .ToLower() method"
	},
	"TrimEnd":{
        "scope": "csharp",
		"prefix": "TrimEnd",
		"body": "TrimEnd(\"$1\")",
		"description": "Adds .TrimEnd(\"\") method"
	},
	"RegexReplace":{
        "scope": "csharp",
		"prefix": "RegexReplace",
		"body": "RegexReplace(\"$1\",\"$2\")",
		"description": "Adds .RegexReplace(\"\",\"\") method"
	},
	"Check Add":{
        "scope": "csharp",
		"prefix": "getContentLength",
		"body": [
			"if (GetContentLength() > 1)",
			"{",
			"    $1",
			"}",
		],
		"description": "Check if anything was been added"
	}, 
	"FirstValue":{
        "scope": "csharp",
		"prefix": "FirstValueOrDefault",
		"body": "FirstValueOrDefault(\"$1\")",
		"description": "Adds .FirstValueOrDefault(\"\") method"
	},
	"FirstUnit":{
        "scope": "csharp",
		"prefix": "FirstUnit",
		"body": "FirstUnit(\"$1\")",
		"description": "Adds .FirstUnit(\"\") method"
	},
	"FirstValueUSM":{
        "scope": "csharp",
		"prefix": "FirstValueUSM",
		"body": "FirstValueUsm()",
		"description": "Adds .FirstValueUsm() method"
	},
	"FirstUnitUSM":{
        "scope": "csharp",
		"prefix": "FirstUnitUSM",
		"body": "FirstUnitUsm()",
		"description": "Adds .FirstUnitUsm() method"
	},
	"Replace":{
        "scope": "csharp",
		"prefix": "Replace",
		"body": "Replace(\"$1\",\"$2\")",
		"description": "Adds .Replace(\"\",\"\") method"
	},
	"Coalesce with Where":{
        "scope": "csharp",
		"prefix": "CoalesceWhere",
		"body": [
			"//Add more attributes if you need",
			"var $1 = Coalesce(",
			"    A[$2].Where(\"$3\"),",
			"    A[$4].Where(\"$3\") ",
			");",
		],
		"description": "Adds .Coalesce() with where construction"
	},
	"Round value": {
        "scope": "csharp",
		"prefix": "Round",
		"body": "Math.Round((double)($1), $2)",
		"description": "Adds Math.Round() construction"
	},
	"Digital content":{
        "scope": "csharp",
		"prefix": "DigitalContent",
		"body": "DC.WIB.GetLines().Flatten(\"$1\")",
		"description": "Get all lines from Digital Content info"
	},
	"Use Literal":{
        "scope": "csharp",
		"prefix": "Literal",
		"body": "Coalesce(L[$1].Value.ToString(), \"$2\")",
		"description": "Adds Literal main construction"
	},
	"Attribute":{
        "scope": "csharp",
		"prefix": "varAttribute",
		"body": "var $1 = A[$2];",
		"description": "Adds new variable from attribute"
	},
	"Add Yes Optional List":{
        "scope": "csharp",
		"prefix": "addYesOptional",
		"body": "Add(A[$1].HasValue(\"$2\") ? \"Yes\" : \"\");",
		"description": "Adds \"Yes\" on output Optional:List<YES:NO>"
	},
	"Add Yes/No Required List":{
        "scope": "csharp",
		"prefix": "addYesNoRequired",
		"body": "Add(A[$1].HasValue(\"$2\") ? \"Yes\" : \"No\");",
		"description": "Adds \"Yes\" or \"No\" on output Required:List<YES:NO>"
	},
	"Add Yes Optional from prodList":{
        "scope": "csharp",
		"prefix": "addYesListOptional",
		"body": [
			"//Add more attributes if need",
			"var attrList = new List<ProductAttribute>(){",
			"    A[$1],",
			"    A[$2]",
			"};",
			"if (attrList.Any(x => x.HasValue(\"$3\"))){",
			"    Add(\"Yes\");",
			"}",
		],
		"description": "Adds \"Yes\" from product List on output Optional:List<YES:NO>"
	},
	"Add Yes/No Required from prodList":{
        "scope": "csharp",
		"prefix": "addYesListRequired",
		"body": [
			"//Add more attributes if need",
			"var attrList = new List<ProductAttribute>(){",
			"    A[$1],",
			"    A[$2]",
			"};",
			"if (attrList.Any(x => x.HasValue(\"$3\"))){",
			"    Add(\"Yes\");",
			"}",
			"else {",
			"    Add(\"No\");",
			"}",
		],
		"description": "Adds \"Yes\" or \"No\" from product List on output Required:List<YES:NO>"
	},
	"Get all data from list attribute":{
        "scope": "csharp",
		"prefix": "getAllDataFromList",
		"body": [
			"//Add more attributes if need",
			"var attrList = new List<ProductAttribute>(){",
			"    A[$1],",
			"    A[$2]",
			"};",
			"var resList = new List<string>();",
			"",
			"if (attrList.Any(x => x.HasValue(\"$3\"))){",
			"    attrList.Where(x => x.HasValue()).ToList().ForEach(",
			"        attr => attr.Values.ForEach(",
			"            val => $4.Add(val.Value().ToUpperFirstChar())",
			"        )",
			"    );",
			"}",
			"",
			"if (resList.Any()){",
			"    Add(resList.Distinct().Flatten(\"$5\"));",
			"}",
		],
		"description": "Expression: Get all data from attribute list"
	}
}